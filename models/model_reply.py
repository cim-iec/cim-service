# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.model import Model
import util


class ModelReply(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, profiles=None, version=None):  # noqa: E501
        """ModelReply - a model defined in OpenAPI

        :param id: The id of this ModelReply.  # noqa: E501
        :type id: int
        :param name: The name of this ModelReply.  # noqa: E501
        :type name: str
        :param profiles: The profiles of this ModelReply.  # noqa: E501
        :type profiles: List[str]
        :param version: The version of this ModelReply.  # noqa: E501
        :type version: str
        """
        # Note: profiles would be of type CGMES Profile. But the serialization
        # and deserialization of foreign types with connexion is very annoying.
        #  Therefore we only convert when interacting with cimpy
        self.openapi_types = {
            'id': int,
            'name': str,
            'profiles': [str],
            'version': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'profiles': 'profiles',
            'version': 'version'
        }

        self._id = id
        self._name = name
        self._profiles = profiles
        self._version = version

    @classmethod
    def from_model(cls, model, id) -> 'ModelReply':
        """Converts the Model into a ModelReply
        """
        return ModelReply(id, model.name, model.profiles, model.version)

    @classmethod
    def from_dict(cls, dikt) -> 'ModelReply':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ModelReply of this ModelReply.  # noqa: E501
        :rtype: ModelReply
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ModelReply.

        Handle to the model  # noqa: E501

        :return: The id of this ModelReply.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelReply.

        Handle to the model  # noqa: E501

        :param id: The id of this ModelReply.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelReply.

        Name of simulation model  # noqa: E501

        :return: The name of this ModelReply.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelReply.

        Name of simulation model  # noqa: E501

        :param name: The name of this ModelReply.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def profiles(self):
        """Gets the profiles of this ModelReply.

        List of cgmes profiles in the model  # noqa: E501

        :return: The profiles of this ModelReply.
        :rtype: List[CGMESProfile]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this ModelReply.

        List of cgmes profiles in the model  # noqa: E501

        :param profiles: The profiles of this ModelReply.
        :type profiles: List[CGMESProfile]
        """
        if profiles is None:
            raise ValueError("Invalid value for `profiles`, must not be `None`")  # noqa: E501

        self._profiles = profiles

    @property
    def version(self):
        """Gets the version of this ModelReply.

        Version string. Defaults to xyz  # noqa: E501

        :return: The version of this ModelReply.
        :rtype: file
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelReply.

        Version string. Defaults to xyz  # noqa: E501

        :param version: The version of this ModelReply.
        :type version: file
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
