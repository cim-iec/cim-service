# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Analysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, type=None, modelid=None):  # noqa: E501
        """Analysis - a model defined in OpenAPI

        :param name: The name of this Analysis.  # noqa: E501
        :type name: str
        :param type: The type of this Analysis.  # noqa: E501
        :type type: str
        :param modelid: The modelid of this Analysis.  # noqa: E501
        :type modelid: int
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'modelid': int
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'modelid': 'modelid'
        }

        self._name = name
        self._type = type
        self._modelid = modelid

    @classmethod
    def from_dict(cls, dikt) -> 'Analysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Analysis of this Analysis.  # noqa: E501
        :rtype: Analysis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Analysis.

        Name of analysis case  # noqa: E501

        :return: The name of this Analysis.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Analysis.

        Name of analysis case  # noqa: E501

        :param name: The name of this Analysis.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Analysis.

        Type of analysis, e.g. PowerflowAnalysis  # noqa: E501

        :return: The type of this Analysis.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Analysis.

        Type of analysis, e.g. PowerflowAnalysis  # noqa: E501

        :param type: The type of this Analysis.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def modelid(self):
        """Gets the modelid of this Analysis.

        Model to consider for analysis  # noqa: E501

        :return: The modelid of this Analysis.
        :rtype: int
        """
        return self._modelid

    @modelid.setter
    def modelid(self, modelid):
        """Sets the modelid of this Analysis.

        Model to consider for analysis  # noqa: E501

        :param modelid: The modelid of this Analysis.
        :type modelid: int
        """
        if modelid is None:
            raise ValueError("Invalid value for `modelid`, must not be `None`")  # noqa: E501

        self._modelid = modelid
