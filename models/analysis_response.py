# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class AnalysisResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator
    (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, status=None, name=None, type=None, modelid=None, param=None, nm1_list=None, nm2_list=None):  # noqa: E501
        """AnalysisResponse - a model defined in OpenAPI

        :param id: The id of this AnalysisResponse.  # noqa: E501
        :type id: int
        :param status: The status of this AnalysisResponse.  # noqa: E501
        :type status: str
        :param name: The name of this AnalysisResponse.  # noqa: E501
        :type name: str
        :param type: The type of this AnalysisResponse.  # noqa: E501
        :type type: str
        :param modelid: The modelid of this AnalysisResponse.  # noqa: E501
        :type modelid: int
        :param param: The param of this AnalysisResponse.  # noqa: E501
        :type param: Dict[str, AnyType]
        :param nm1_list: The nm1_list of this AnalysisResponse.  # noqa: E501
        :type nm1_list: List[str]
        :param nm2_list: The nm2_list of this AnalysisResponse.  # noqa: E501
        :type nm2_list: List[str]
        """
        self.openapi_types = {
            'id': int,
            'status': str,
            'name': str,
            'type': str,
            'modelid': int,
            'param': Dict[str, {}],
            'nm1_list': List[str],
            'nm2_list': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'name': 'name',
            'type': 'type',
            'modelid': 'modelid',
            'param': 'param',
            'nm1_list': 'nm1List',
            'nm2_list': 'nm2List'
        }

        self._id = id
        self._status = status
        self._name = name
        self._type = type
        self._modelid = modelid
        self._param = param
        self._nm1_list = nm1_list
        self._nm2_list = nm2_list

    @classmethod
    def from_dict(cls, dikt) -> 'AnalysisResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisResponse of this AnalysisResponse.  # noqa: E501
        :rtype: AnalysisResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AnalysisResponse.


        :return: The id of this AnalysisResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalysisResponse.


        :param id: The id of this AnalysisResponse.
        :type id: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this AnalysisResponse.

        Indicate if analysis is completed or not  # noqa: E501

        :return: The status of this AnalysisResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnalysisResponse.

        Indicate if analysis is completed or not  # noqa: E501

        :param status: The status of this AnalysisResponse.
        :type status: str
        """

        self._status = status

    @property
    def name(self):
        """Gets the name of this AnalysisResponse.

        Name of analysis case  # noqa: E501

        :return: The name of this AnalysisResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalysisResponse.

        Name of analysis case  # noqa: E501

        :param name: The name of this AnalysisResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this AnalysisResponse.

        Type of analysis, e.g. PowerflowAnalysis  # noqa: E501

        :return: The type of this AnalysisResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalysisResponse.

        Type of analysis, e.g. PowerflowAnalysis  # noqa: E501

        :param type: The type of this AnalysisResponse.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def modelid(self):
        """Gets the modelid of this AnalysisResponse.

        Model to consider for analysis  # noqa: E501

        :return: The modelid of this AnalysisResponse.
        :rtype: int
        """
        return self._modelid

    @modelid.setter
    def modelid(self, modelid):
        """Sets the modelid of this AnalysisResponse.

        Model to consider for analysis  # noqa: E501

        :param modelid: The modelid of this AnalysisResponse.
        :type modelid: int
        """
        if modelid is None:
            raise ValueError("Invalid value for `modelid`, must not be `None`")  # noqa: E501

        self._modelid = modelid

    @property
    def param(self):
        """Gets the param of this AnalysisResponse.

        attribute map, e.g. strings and numbers  # noqa: E501

        :return: The param of this AnalysisResponse.
        :rtype: Dict[str, AnyType]
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this AnalysisResponse.

        attribute map, e.g. strings and numbers  # noqa: E501

        :param param: The param of this AnalysisResponse.
        :type param: Dict[str, AnyType]
        """

        self._param = param

    @property
    def nm1_list(self):
        """Gets the nm1_list of this AnalysisResponse.

        List of N-1 components  # noqa: E501

        :return: The nm1_list of this AnalysisResponse.
        :rtype: List[str]
        """
        return self._nm1_list

    @nm1_list.setter
    def nm1_list(self, nm1_list):
        """Sets the nm1_list of this AnalysisResponse.

        List of N-1 components  # noqa: E501

        :param nm1_list: The nm1_list of this AnalysisResponse.
        :type nm1_list: List[str]
        """
        if nm1_list is None:
            raise ValueError("Invalid value for `nm1_list`, must not be `None`")  # noqa: E501

        self._nm1_list = nm1_list

    @property
    def nm2_list(self):
        """Gets the nm2_list of this AnalysisResponse.

        List of N-2 components  # noqa: E501

        :return: The nm2_list of this AnalysisResponse.
        :rtype: List[str]
        """
        return self._nm2_list

    @nm2_list.setter
    def nm2_list(self, nm2_list):
        """Sets the nm2_list of this AnalysisResponse.

        List of N-2 components  # noqa: E501

        :param nm2_list: The nm2_list of this AnalysisResponse.
        :type nm2_list: List[str]
        """

        self._nm2_list = nm2_list
