# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.any_type import AnyType
from openapi_server import util

from openapi_server.models.any_type import AnyType  # noqa: E501

class PowerflowAnalysisAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, param=None):  # noqa: E501
        """PowerflowAnalysisAllOf - a model defined in OpenAPI

        :param param: The param of this PowerflowAnalysisAllOf.  # noqa: E501
        :type param: Dict[str, AnyType]
        """
        self.openapi_types = {
            'param': Dict[str, AnyType]
        }

        self.attribute_map = {
            'param': 'param'
        }

        self._param = param

    @classmethod
    def from_dict(cls, dikt) -> 'PowerflowAnalysisAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PowerflowAnalysis_allOf of this PowerflowAnalysisAllOf.  # noqa: E501
        :rtype: PowerflowAnalysisAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def param(self):
        """Gets the param of this PowerflowAnalysisAllOf.

        attribute map, e.g. strings and numbers to define solver settings etc.  # noqa: E501

        :return: The param of this PowerflowAnalysisAllOf.
        :rtype: Dict[str, AnyType]
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this PowerflowAnalysisAllOf.

        attribute map, e.g. strings and numbers to define solver settings etc.  # noqa: E501

        :param param: The param of this PowerflowAnalysisAllOf.
        :type param: Dict[str, AnyType]
        """

        self._param = param
