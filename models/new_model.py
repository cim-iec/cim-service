# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class NewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, file=None):  # noqa: E501
        """NewModel - a model defined in OpenAPI

        :param name: The name of this NewModel.  # noqa: E501
        :type name: str
        :param file: The file of this NewModel.  # noqa: E501
        :type file: file
        """
        self.openapi_types = {
            'name': str,
            'file': file
        }

        self.attribute_map = {
            'name': 'name',
            'file': 'file'
        }

        self._name = name
        self._file = file

    @classmethod
    def from_dict(cls, dikt) -> 'NewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewModel of this NewModel.  # noqa: E501
        :rtype: NewModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this NewModel.


        :return: The name of this NewModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewModel.


        :param name: The name of this NewModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def file(self):
        """Gets the file of this NewModel.


        :return: The file of this NewModel.
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this NewModel.


        :param file: The file of this NewModel.
        :type file: file
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file
