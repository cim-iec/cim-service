# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401
from xml.etree import ElementTree
from models.base_model_ import Model
import util
import os

class NewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, files=None):  # noqa: E501
        """NewModel - a model defined in OpenAPI

        :param name: The name of this NewModel.  # noqa: E501
        :type name: str
        :param files: The files of this NewModel.  # noqa: E501
        :type files: List[file]
        """

        self.openapi_types = {
            'name': str,
            'files': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'files': 'files'
        }

        self._name = name
        self._files = {}
        for f in files:
            name = os.path.basename(f.filename)
            # Validate xml input
            ElementTree.fromstring(f.stream.read())
            self._files[name] = f.stream.read()

    @classmethod
    def from_dict(cls, dikt) -> 'NewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewModel of this NewModel.  # noqa: E501
        :rtype: NewModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this NewModel.


        :return: The name of this NewModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewModel.


        :param name: The name of this NewModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def files(self):
        """Gets the files of this NewModel.


        :return: The files of this NewModel.
        :rtype: List[file]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this NewModel.


        :param files: The files of this NewModel.
        :type files: List[file]
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._files = files
